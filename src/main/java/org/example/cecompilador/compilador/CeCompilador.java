/* CeCompilador.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. CeCompilador.java */
package org.example.cecompilador.compilador;
import org.example.cecompilador.recovery.*;

import java.io.Reader;
import java.util.ArrayList;
import java.util.List;

public class CeCompilador/*@bgen(jjtree)*/implements CeCompiladorTreeConstants, CeCompiladorConstants {/*@bgen(jjtree)*/
    protected static JJTCeCompiladorState jjtree = new JJTCeCompiladorState();
    public static void main(String args []) throws ParseException
    {
        CeCompilador parser = new CeCompilador(System.in);
        while (true)
        {
            System.out.println("Lendo da entrada padrao...");
            System.out.print("Insira uma expressao como \"mein {  inti x ; }\" :");
            try
            {
                //parser.main();
                SimpleNode n = CeCompilador.main();
                n.dump(" ");
            }
            catch (Exception e)
            {
                System.out.println("Ih rapaz...");
                System.out.println(e.getMessage());
                parser.ReInit(System.in);
            }
            catch (Error e)
            {
                System.out.println("Deu ruim.");
                System.out.println(e.getMessage());
                break;
            }
        }
    }

    static public String im(int x)
    {
        int k;
        String s;
        s = tokenImage[x];
        k = s.lastIndexOf("\"");
        try {
            s = s.substring(1,k);
        }
        catch (StringIndexOutOfBoundsException e)
        {}
        return s;
    }

    static Token lastError = null;
    static boolean eof;    // variável que indica se EOF foi alcançado

    // o método abaixo consome tokens até alcançar um que pertença ao conjunto
    // de sincronização
    static void consumeUntil(RecoverySet g,
                             ParseException e,
                             String met) throws ParseEOFException,
            ParseException
    {
        Token tok;
        System.out.println();
        System.out.println("* " + met + " *");
        System.out.println("     Conjunto de sincroniza\u00e7\u00e3o: " + g);

        if (g == null) throw e; // se o conjunto é null, propaga a exceção

        tok = getToken(1); // pega token corrente
        while ( ! eof ) { // se não chegou ao fim do arquivo
            if ( g.contains(tok.kind)) {//achou um token no conjunto
                System.out.println("     Encontrado token de sincroniza\u00e7\u00e3o: " +
                        im(tok.kind));
                break;
            }
            System.out.println("     Ignorando o token: " + im(tok.kind));
            getNextToken();     // pega próximo token
            tok = getToken(1);
            if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?
                eof = true;
        }
        if ( tok != lastError)  {
            System.out.println(e.getMessage());
            lastError = tok;

        }
        if ( eof )
            throw new ParseEOFException("Encontrei EOF onde n\u00e3o deveria.");
    }

    private static java.util.List errorList = new java.util.ArrayList();

    public static void reset() {
        // Limpa a lista de erros e reinicia o fluxo de entrada
        errorList.clear();
        // A linha abaixo pode ser desnecessária dependendo de como você chama no controller.
        // ReInit(new java.io.StringReader(""));
    }

    public static java.util.List getErrors() {
        return errorList;
    }

    static final public SimpleNode main() throws ParseException {/*@bgen(jjtree) main */
        SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);RecoverySet follow = First.main;
        try {
            try {
                jj_consume_token(INICIAPROG);
                jj_consume_token(ABREBLOCO);
                label_1:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                        case ABREBLOCO:
                        case TIPOINT:
                        case TIPOFLOAT:
                        case TIPOBOL:
                        case IF:
                        case ABREPAR:
                        case WHILE:
                        case DO:
                        case CONST_INT:
                        case CONST_FLOAT:
                        case ID:{
                            ;
                            break;
                        }
                        default:
                            jj_la1[0] = jj_gen;
                            break label_1;
                    }
                    instrucao();
                }
                jj_consume_token(FECHABLOCO);
            } catch (ParseException e) {
                errorList.add(e);
                consumeUntil(follow, e, "main");
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if ("" != null) return jjtn000;}
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    static final public void instrucao() throws ParseException {/*@bgen(jjtree) instrucao */
        SimpleNode jjtn000 = new SimpleNode(JJTINSTRUCAO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);RecoverySet follow = First.instrucao;
        try {
            try {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case TIPOINT:
                    case TIPOFLOAT:
                    case TIPOBOL:
                    case ABREPAR:
                    case CONST_INT:
                    case CONST_FLOAT:
                    case ID:{
                        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                            case TIPOINT:
                            case TIPOFLOAT:
                            case TIPOBOL:{
                                declaracaoVariavel();
                                break;
                            }
                            case ID:{
                                atribuicao();
                                break;
                            }
                            case ABREPAR:
                            case CONST_INT:
                            case CONST_FLOAT:{
                                expressao();
                                jj_consume_token(FIMINSTRUCAO);
                                break;
                            }
                            default:
                                jj_la1[1] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                        break;
                    }
                    case ABREBLOCO:{
                        blocoInstrucoes();
                        break;
                    }
                    case IF:{
                        estruturaCondicional();
                        break;
                    }
                    case WHILE:
                    case DO:{
                        estruturaRepeticao();
                        break;
                    }
                    default:
                        jj_la1[2] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            } catch (ParseException e) {
                errorList.add(e);
                consumeUntil(follow, e, "instrucao");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void blocoInstrucoes() throws ParseException {/*@bgen(jjtree) blocoInstrucoes */
        SimpleNode jjtn000 = new SimpleNode(JJTBLOCOINSTRUCOES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);RecoverySet follow = First.blocoInstrucao;
        try {
            try {
                jj_consume_token(ABREBLOCO);
                label_2:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                        case ABREBLOCO:
                        case TIPOINT:
                        case TIPOFLOAT:
                        case TIPOBOL:
                        case IF:
                        case ABREPAR:
                        case WHILE:
                        case DO:
                        case CONST_INT:
                        case CONST_FLOAT:
                        case ID:{
                            ;
                            break;
                        }
                        default:
                            jj_la1[3] = jj_gen;
                            break label_2;
                    }
                    instrucao();
                }
                jj_consume_token(FECHABLOCO);
            } catch (ParseException e) {
                errorList.add(e);
                consumeUntil(follow, e, "bloco de instrucoes");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void declaracaoVariavel() throws ParseException {/*@bgen(jjtree) declaracaoVariavel */
        SimpleNode jjtn000 = new SimpleNode(JJTDECLARACAOVARIAVEL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);RecoverySet follow = First.declaraVariavel;
        try {
            try {
                declaraTipo();
                jj_consume_token(ID);
                label_3:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                        case COMMA:{
                            ;
                            break;
                        }
                        default:
                            jj_la1[4] = jj_gen;
                            break label_3;
                    }
                    jj_consume_token(COMMA);
                    jj_consume_token(ID);
                }
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case ASSIGN:{
                        jj_consume_token(ASSIGN);
                        expressao();
                        break;
                    }
                    default:
                        jj_la1[5] = jj_gen;
                        ;
                }
                jj_consume_token(FIMINSTRUCAO);
            } catch (ParseException e) {
                errorList.add(e);
                consumeUntil(follow, e, "declaracao de variavel");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void declaraTipo() throws ParseException {/*@bgen(jjtree) declaraTipo */
        SimpleNode jjtn000 = new SimpleNode(JJTDECLARATIPO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case TIPOINT:{
                    jj_consume_token(TIPOINT);
                    break;
                }
                case TIPOFLOAT:{
                    jj_consume_token(TIPOFLOAT);
                    break;
                }
                case TIPOBOL:{
                    jj_consume_token(TIPOBOL);
                    break;
                }
                default:
                    jj_la1[6] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void atribuicao() throws ParseException {/*@bgen(jjtree) atribuicao */
        SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);RecoverySet follow = First.atribuicao;
        try {
            try {
                jj_consume_token(ID);
                jj_consume_token(ASSIGN);
                expressao();
                jj_consume_token(FIMINSTRUCAO);
            } catch (ParseException e) {
                errorList.add(e);
                consumeUntil(follow, e, "atribuicao");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void estruturaCondicional() throws ParseException {/*@bgen(jjtree) estruturaCondicional */
        SimpleNode jjtn000 = new SimpleNode(JJTESTRUTURACONDICIONAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);RecoverySet follow = First.estruturaCondicional;
        try {
            try {
                jj_consume_token(IF);
                jj_consume_token(ABREPAR);
                expressao();
                jj_consume_token(FECHAPAR);
                blocoInstrucoes();
            } catch (ParseException e) {
                errorList.add(e);
                consumeUntil(follow, e, "estrutura condicional");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void estruturaRepeticao() throws ParseException {/*@bgen(jjtree) estruturaRepeticao */
        SimpleNode jjtn000 = new SimpleNode(JJTESTRUTURAREPETICAO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);RecoverySet follow = First.estruturaRepeticao;
        try {
            try {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case WHILE:{
                        estruturaWhile();
                        break;
                    }
                    case DO:{
                        estruturaDoWhile();
                        break;
                    }
                    default:
                        jj_la1[7] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            } catch (ParseException e) {
                errorList.add(e);
                consumeUntil(follow, e, "estrutura de repeticao");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void estruturaWhile() throws ParseException {/*@bgen(jjtree) estruturaWhile */
        SimpleNode jjtn000 = new SimpleNode(JJTESTRUTURAWHILE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);RecoverySet follow = First.estruturaWhile;
        try {
            try {
                jj_consume_token(WHILE);
                jj_consume_token(ABREPAR);
                expressao();
                jj_consume_token(FECHAPAR);
                blocoInstrucoes();
            } catch (ParseException e) {
                errorList.add(e);
                consumeUntil(follow, e, "estrutura while");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void estruturaDoWhile() throws ParseException {/*@bgen(jjtree) estruturaDoWhile */
        SimpleNode jjtn000 = new SimpleNode(JJTESTRUTURADOWHILE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);RecoverySet follow = First.estruturaDoWhile;
        try {
            try {
                jj_consume_token(DO);
                blocoInstrucoes();
                jj_consume_token(DOWHILE);
                jj_consume_token(ABREPAR);
                expressao();
                jj_consume_token(FECHAPAR);
                jj_consume_token(FIMINSTRUCAO);
            } catch (ParseException e) {
                errorList.add(e);
                consumeUntil(follow, e, "estrutura do-while");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void expressao() throws ParseException {/*@bgen(jjtree) expressao */
        SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);RecoverySet follow = First.expressao;
        try {
            try {
                expressaoRelacional();
                label_4:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                        case OPBOOL:{
                            ;
                            break;
                        }
                        default:
                            jj_la1[8] = jj_gen;
                            break label_4;
                    }
                    jj_consume_token(OPBOOL);
                    expressaoRelacional();
                }
            } catch (ParseException e) {
                errorList.add(e);
                consumeUntil(follow, e, "expressao");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void expressaoRelacional() throws ParseException {/*@bgen(jjtree) expressaoRelacional */
        SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAORELACIONAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);RecoverySet follow = First.expressaoRelacional;
        try {
            try {
                expressaoAritmetica();
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case OPREL:{
                        jj_consume_token(OPREL);
                        expressaoAritmetica();
                        break;
                    }
                    default:
                        jj_la1[9] = jj_gen;
                        ;
                }
            } catch (ParseException e) {
                errorList.add(e);
                consumeUntil(follow, e, "expressao relacional");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void expressaoAritmetica() throws ParseException {/*@bgen(jjtree) expressaoAritmetica */
        SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAOARITMETICA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);RecoverySet follow = First.expressaoAritmetica;
        try {
            try {
                termo();
                label_5:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                        case OPAD:{
                            ;
                            break;
                        }
                        default:
                            jj_la1[10] = jj_gen;
                            break label_5;
                    }
                    jj_consume_token(OPAD);
                    termo();
                }
            } catch (ParseException e) {
                errorList.add(e);
                consumeUntil(follow, e, "expressao aritmetica");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void termo() throws ParseException {/*@bgen(jjtree) termo */
        SimpleNode jjtn000 = new SimpleNode(JJTTERMO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);RecoverySet follow = First.termo;
        try {
            try {
                fator();
                label_6:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                        case OPMULT:{
                            ;
                            break;
                        }
                        default:
                            jj_la1[11] = jj_gen;
                            break label_6;
                    }
                    jj_consume_token(OPMULT);
                    fator();
                }
            } catch (ParseException e) {
                errorList.add(e);
                consumeUntil(follow, e, "termo");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void fator() throws ParseException {/*@bgen(jjtree) fator */
        SimpleNode jjtn000 = new SimpleNode(JJTFATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);RecoverySet follow = First.fator;
        try {
            try {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case ID:{
                        jj_consume_token(ID);
                        break;
                    }
                    case CONST_INT:{
                        jj_consume_token(CONST_INT);
                        break;
                    }
                    case CONST_FLOAT:{
                        jj_consume_token(CONST_FLOAT);
                        break;
                    }
                    case ABREPAR:{
                        jj_consume_token(ABREPAR);
                        expressao();
                        jj_consume_token(FECHAPAR);
                        break;
                    }
                    default:
                        jj_la1[12] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            } catch (ParseException e) {
                errorList.add(e);
                consumeUntil(follow, e, "fator");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static private boolean jj_initialized_once = false;
    /** Generated Token Manager. */
    static public CeCompiladorTokenManager token_source;
    static SimpleCharStream jj_input_stream;
    /** Current token. */
    static public Token token;
    /** Next token. */
    static public Token jj_nt;
    static private int jj_ntk;
    static private int jj_gen;
    static final private int[] jj_la1 = new int[13];
    static private int[] jj_la1_0;
    static {
        jj_la1_init_0();
    }
    private static void jj_la1_init_0() {
        jj_la1_0 = new int[] {0xb183e40,0xb002e00,0xb183e40,0xb183e40,0x40000,0x20000,0xe00,0x180000,0x10000,0x8000,0x400000,0x800000,0xb002000,};
    }

    /** Constructor with InputStream. */
    public CeCompilador(java.io.InputStream stream) {
        this(stream, null);
    }
    /** Constructor with InputStream and supplied encoding */
    public CeCompilador(java.io.InputStream stream, String encoding) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser.  ");
            System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("	   during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
        token_source = new CeCompiladorTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    /** Reinitialise. */
    static public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }
    /** Reinitialise. */
    static public void ReInit(java.io.InputStream stream, String encoding) {
        try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    /** Constructor. */
    public CeCompilador(java.io.Reader stream) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("	   during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new CeCompiladorTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    /** Reinitialise. */
    static public void ReInit(java.io.Reader stream) {
        if (jj_input_stream == null) {
            jj_input_stream = new SimpleCharStream(stream, 1, 1);
        } else {
            jj_input_stream.ReInit(stream, 1, 1);
        }
        if (token_source == null) {
            token_source = new CeCompiladorTokenManager(jj_input_stream);
        }

        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    /** Constructor with generated Token Manager. */
    public CeCompilador(CeCompiladorTokenManager tm) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("	   during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    /** Reinitialise. */
    public void ReInit(CeCompiladorTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    static private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }


    /** Get the next Token. */
    static final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    static final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    static private int jj_ntk_f() {
        if ((jj_nt=token.next) == null)
            return (jj_ntk = (token.next=token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    static private int[] jj_expentry;
    static private int jj_kind = -1;

    /** Generate ParseException. */
    static public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[28];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 13; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1<<j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 28; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    static private boolean trace_enabled;

    /** Trace enabled. */
    static final public boolean trace_enabled() {
        return trace_enabled;
    }

    /** Enable tracing. */
    static final public void enable_tracing() {
    }

    /** Disable tracing. */
    static final public void disable_tracing() {
    }

}
