/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CeCompilador.jj */
/*@egen*/options
{
  static = true;
}

PARSER_BEGIN(CeCompilador)
package compilador;

import recovery.*;

public class CeCompilador/*@bgen(jjtree)*/implements CeCompiladorTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTCeCompiladorState jjtree = new JJTCeCompiladorState();

/*@egen*/
  public static void main(String args []) throws ParseException
  {
    CeCompilador parser = new CeCompilador(System.in);
    while (true)
    {
      System.out.println("Lendo da entrada padrao...");
      System.out.print("Insira uma expressao como \"mein {  inti x ; }\" :");
      try
      {
        //parser.main();
        SimpleNode n = CeCompilador.main();
        n.dump(" ");
      }
      catch (Exception e)
      {
        System.out.println("Ih rapaz...");
        System.out.println(e.getMessage());
        parser.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Deu ruim.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

static public String im(int x)
  {
    int k;
	String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try {
      s = s.substring(1,k);
    }
   catch (StringIndexOutOfBoundsException e)
	   {}
   return s;
  }
	
  static Token lastError = null;
  static boolean eof;    // vari\u00e1vel que indica se EOF foi alcan\u00e7ado
	
  // o m\u00e9todo abaixo consome tokens at\u00e9 alcan\u00e7ar um que perten\u00e7a ao conjunto
  // de sincroniza\u00e7\u00e3o
  static void consumeUntil(RecoverySet g,
	                 ParseException e,
	                 String met) throws ParseEOFException,
	                                    ParseException
  {
	Token tok;
	System.out.println();
	System.out.println("* " + met + " *");
	System.out.println("     Conjunto de sincroniza\u00e7\u00e3o: " + g);
		
	if (g == null) throw e; // se o conjunto \u00e9 null, propaga a exce\u00e7\u00e3o
	
	tok = getToken(1); // pega token corrente
	while ( ! eof )	{ // se n\u00e3o chegou ao fim do arquivo
	  if ( g.contains(tok.kind)) {//achou um token no conjunto
	    System.out.println("     Encontrado token de sincroniza\u00e7\u00e3o: " + 
	                       im(tok.kind));
	    break;
	  }
	  System.out.println("     Ignorando o token: " + im(tok.kind));
	  getNextToken();     // pega pr\u00f3ximo token       
      tok = getToken(1);
	  if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
	      eof = true;
	}
    if ( tok != lastError)  {
	  System.out.println(e.getMessage());
	  lastError = tok;
	   
	}
	if ( eof )
	  throw new ParseEOFException("Encontrei EOF onde n\u00e3o deveria.");
	}
  
}

PARSER_END(CeCompilador)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < INICIAPROG : "mein" >
| < ABREBLOCO : "{" >
| < FECHABLOCO : "}" >
| < FIMINSTRUCAO: ";" >
| < TIPOINT : "inti" >
| < TIPOFLOAT : "flouti" >
| < TIPOBOL : "buleam" >
}

TOKEN : /* CONDITIONALS */
{
  < IF : "ifi" >
| < ABREPAR : "(" >
| < FECHAPAR : ")" >
| < OPREL : "==" | "!=" | "<" | ">" | "<=" | ">=" >
| < OPBOOL : "&&" | "||" >
}

TOKEN : /* ASSIGNMENT */
{
  < ASSIGN : "=" >
| < COMMA : "," >
}

TOKEN : /* LOOP */
{
  < WHILE : "uaio" >
| < DO : "du" >
| < DOWHILE : "uaiu" >
}

TOKEN : /* ARITHMETIC OPERATORS */
{
  < OPAD : "+" | "-" >
| < OPMULT : "*" | "/" >
}

TOKEN :
{
  < CONST_INT : (["0"-"9"])+ >
| < CONST_FLOAT : (["0"-"9"])+ "." (["0"-"9"])+ >
| < #DIGITO : [ "0"-"9" ] >
| < ID : ["a"-"z"](["a"-"z"] | < DIGITO >)* >
}

SimpleNode main() :
{/*@bgen(jjtree) main */
 SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet follow = First.main;}
{/*@bgen(jjtree) main */
        try {
/*@egen*/

	try {
		< INICIAPROG > < ABREBLOCO > (instrucao())* < FECHABLOCO >  
 	} catch(ParseException e) {
		consumeUntil(follow, e, "main");
 	}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

 	{
 	  return jjtn000;
 	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
  
}

void instrucao() :
{/*@bgen(jjtree) instrucao */
 SimpleNode jjtn000 = new SimpleNode(JJTINSTRUCAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet follow = First.instrucao;}
{/*@bgen(jjtree) instrucao */
    try {
/*@egen*/
    try {
        (declaracaoVariavel() | atribuicao() | expressao() < FIMINSTRUCAO >) | blocoInstrucoes() | estruturaCondicional() | estruturaRepeticao()
    } catch(ParseException e) {
        consumeUntil(follow, e, "instrucao");
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void blocoInstrucoes() :
{/*@bgen(jjtree) blocoInstrucoes */
 SimpleNode jjtn000 = new SimpleNode(JJTBLOCOINSTRUCOES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet follow = First.blocoInstrucao;}
{/*@bgen(jjtree) blocoInstrucoes */
    try {
/*@egen*/
    try {
        < ABREBLOCO > (instrucao())* < FECHABLOCO >
    } catch(ParseException e) {
        consumeUntil(follow, e, "bloco de instrucoes");
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void declaracaoVariavel() :
{/*@bgen(jjtree) declaracaoVariavel */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARACAOVARIAVEL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet follow = First.declaraVariavel;}
{/*@bgen(jjtree) declaracaoVariavel */
        try {
/*@egen*/
	try {
		declaraTipo() < ID > (< COMMA > < ID >)* ( < ASSIGN > expressao() )? < FIMINSTRUCAO >
 	} catch(ParseException e) {
		consumeUntil(follow, e, "declaracao de variavel");
 	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void declaraTipo() :
{/*@bgen(jjtree) declaraTipo */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATIPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declaraTipo */
    try {
/*@egen*/
    ( < TIPOINT > | < TIPOFLOAT > | < TIPOBOL > )/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void atribuicao() :
{/*@bgen(jjtree) atribuicao */
 SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet follow = First.atribuicao;}
{/*@bgen(jjtree) atribuicao */
    try {
/*@egen*/
    try {
        < ID > < ASSIGN > expressao() < FIMINSTRUCAO >
    } catch(ParseException e) {
        consumeUntil(follow, e, "atribuicao");
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void estruturaCondicional() :
{/*@bgen(jjtree) estruturaCondicional */
 SimpleNode jjtn000 = new SimpleNode(JJTESTRUTURACONDICIONAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet follow = First.estruturaCondicional;}
{/*@bgen(jjtree) estruturaCondicional */
    try {
/*@egen*/
    try {
        < IF > < ABREPAR > expressao() < FECHAPAR > blocoInstrucoes()
    } catch(ParseException e) {
        consumeUntil(follow, e, "estrutura condicional");
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void estruturaRepeticao() :
{/*@bgen(jjtree) estruturaRepeticao */
 SimpleNode jjtn000 = new SimpleNode(JJTESTRUTURAREPETICAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet follow = First.estruturaRepeticao;}
{/*@bgen(jjtree) estruturaRepeticao */
    try {
/*@egen*/
    try {
        (estruturaWhile() | estruturaDoWhile())
    } catch(ParseException e) {
        consumeUntil(follow, e, "estrutura de repeticao");
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void estruturaWhile() :
{/*@bgen(jjtree) estruturaWhile */
 SimpleNode jjtn000 = new SimpleNode(JJTESTRUTURAWHILE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet follow = First.estruturaWhile;}
{/*@bgen(jjtree) estruturaWhile */
    try {
/*@egen*/
    try {
        < WHILE > < ABREPAR > expressao() < FECHAPAR > blocoInstrucoes()
    } catch(ParseException e) {
        consumeUntil(follow, e, "estrutura while");
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void estruturaDoWhile() :
{/*@bgen(jjtree) estruturaDoWhile */
 SimpleNode jjtn000 = new SimpleNode(JJTESTRUTURADOWHILE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet follow = First.estruturaDoWhile;}
{/*@bgen(jjtree) estruturaDoWhile */
    try {
/*@egen*/
    try {
        < DO > blocoInstrucoes() < DOWHILE > < ABREPAR > expressao() < FECHAPAR > < FIMINSTRUCAO >
    } catch(ParseException e) {
        consumeUntil(follow, e, "estrutura do-while");
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void expressao() :
{/*@bgen(jjtree) expressao */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet follow = First.expressao;}
{/*@bgen(jjtree) expressao */
    try {
/*@egen*/
    try {
        expressaoRelacional() ( < OPBOOL > expressaoRelacional() )*
    } catch(ParseException e) {
        consumeUntil(follow, e, "expressao");
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void expressaoRelacional() :
{/*@bgen(jjtree) expressaoRelacional */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAORELACIONAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet follow = First.expressaoRelacional;}
{/*@bgen(jjtree) expressaoRelacional */
    try {
/*@egen*/
    try {
        expressaoAritmetica() ( < OPREL > expressaoAritmetica() )?
    } catch(ParseException e) {
        consumeUntil(follow, e, "expressao relacional");
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void expressaoAritmetica() :
{/*@bgen(jjtree) expressaoAritmetica */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAOARITMETICA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet follow = First.expressaoAritmetica;}
{/*@bgen(jjtree) expressaoAritmetica */
    try {
/*@egen*/
    try {
        termo() ( < OPAD > termo() )*
    } catch(ParseException e) {
        consumeUntil(follow, e, "expressao aritmetica");
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void termo() :
{/*@bgen(jjtree) termo */
 SimpleNode jjtn000 = new SimpleNode(JJTTERMO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet follow = First.termo;}
{/*@bgen(jjtree) termo */
    try {
/*@egen*/
    try {
        fator() ( < OPMULT > fator() )*
    } catch(ParseException e) {
        consumeUntil(follow, e, "termo");
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void fator() :
{/*@bgen(jjtree) fator */
 SimpleNode jjtn000 = new SimpleNode(JJTFATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet follow = First.fator;}
{/*@bgen(jjtree) fator */
    try {
/*@egen*/
    try {
        < ID > | < CONST_INT > | < CONST_FLOAT > | < ABREPAR > expressao() < FECHAPAR >
    } catch(ParseException e) {
        consumeUntil(follow, e, "fator");
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}